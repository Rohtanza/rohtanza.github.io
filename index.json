[{"content":"Crafting This Blog with Hugo Welcome to the story behind this blog, brought to life with Hugo - a speedy and versatile static site generator.\nHugo Hugo, a nifty tool written in Go, makes building websites a breeze. It\u0026rsquo;s fast, flexible, and dead simple.\nInstalling Hugo First off, grab Git and then install Hugo.\nOn Linux If you\u0026rsquo;re on Linux, using the Snap package manager is a swift way to get Hugo:\nsudo snap install hugo Snap usually keeps Hugo updated compared to other package managers.\nInstalling a Theme After installing Hugo, choosing a theme is the next step. Themes define the visual appearance of your website.\nhttps://themes.gohugo.io/ To install a Hugo theme, navigate to your project\u0026rsquo;s root directory and use Git to clone the theme repository. For example:\ncd your_project_folder git clone https://github.com/your-theme-repo.git themes/your-theme-name Remember to replace your-theme-repo and your-theme-name with the actual theme repository and name.\nCreating Your Site Initialize a new Hugo site with the command:\nhugo new site your_site_name This creates a new directory named your_site_name containing the basic structure for your site.\nRunning the Development Server Start the development server to preview your site:\nhugo server -D This command launches a local server at \u0026lsquo;http://localhost:1313\u0026rsquo;, allowing you to view changes in real-time.\nDeployment with GitHub Pages Lastly, this blog is deployed using GitHub Pages, a convenient way to host static websites directly from a GitHub repository.\nOnce your Hugo site is ready, push it to a GitHub repository and enable GitHub Pages in your repository settings.\nInspiration This blog draws inspiration from the Lilian Weng\u0026rsquo;s Blog and was nudged into existence by the guiding force of Ayyzenn Pi🐧 😅.\n","permalink":"/blogs/crafting-blog-with-hugo/","summary":"Building a blog using Hugo - A brief walkthrough","title":"Crafting This Blog with Hugo"},{"content":"Introduction Crafting your blog with Hugo and effortlessly deploying it on Github Pages using Github Actions. This guide will walk you through the process.If you already have a site, jump straight to Configuring Github Actions for Github Pages Deployment part\nMake sure you have Git and ghcli installed, and your GitHub account is linked. Otherwise, you may encounter some nasty errors while running commands in this blog. GitHub CLI, Git.\nStep 1: Setting up Hugo Mac: brew install hugo Linux: sudo snap install hugo sudo snap connect hugo:removable-media sudo snap disconnect hugo:removable-media The last two commands to enable or revoke access to removable media\nWindows: its 2024 now and you still using windows, switch to linux already 😒. Step 2: Create a New Site with Hugo hugo new site \u0026lt;site_name\u0026gt; -f yml This command conjures up a directory with Hugo templates, And don\u0026rsquo;t worry about toml - we are sticking with the yml for this blog as it is easy to use.\nStep 3: Install Theme Go to Hugo Themes Pick a theme that vibes with your style. Navigate to the theme\u0026rsquo;s source code (GitHub repo). Installing Theme: git clone \u0026lt;theme_repo_url\u0026gt; themes/\u0026lt;theme_name\u0026gt; --depth=1 The \u0026ndash;depth=1 ensures you\u0026rsquo;re not drowning in commit history.\nConfigure Theme in config.yml: theme: \u0026lt;theme_name\u0026gt; Smooth. This will set a basic sit for your blog to be deplyed on GitHub.\nConfiguring Github Actions for Github Pages Deployment Initialize Git Repository: echo \u0026#34;# README\u0026#34; \u0026gt;\u0026gt; README.md git init git add README.md git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin \u0026lt;path_to_your_git_repo\u0026gt; git push -u origin main To link your local Git repository with a remote repository on GitHub, follow these steps:\nCopy Repository URL: On GitHub, navigate to your repository. Click on the \u0026ldquo;Code\u0026rdquo; button, and copy the repository URL (HTTPS or SSH). Navigate to Your Local Repository: Open a terminal or command prompt. Navigate to the directory of your local Git repository. Link Local Repository to Remote Repository: Run the following command, replacing \u0026lt;repository_url\u0026gt; with the URL you copied: If you\u0026rsquo;re using HTTPS: git remote add origin \u0026lt;repository_url\u0026gt;\nIf you\u0026rsquo;re using SSH: git remote add origin git@github.com:/\u0026lt;repository_name\u0026gt;.git\nVerify the Connection: To verify that your local repository is connected to the remote repository, you can run: git remote -v This command should display the fetch and push URLs for the origin remote.\nManually Add gh-pages Branch: git checkout -b gh-pages this branch is must for GitHub pages to work.\nConfigure Workflow Permissions: Adjust workflow permissions in the Github settings. Allow read and write permissions under Settings \u0026gt; Actions \u0026gt; General \u0026gt; Workflow permissions\nAdd a .github/workflows/deploy.yml file under the project root directory name: Publish to GH Pages on: push: branches: - main pull_request: jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout source uses: actions/checkout@v3 with: submodules: true - name: Checkout destination uses: actions/checkout@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: ref: gh-pages path: built-site - name: Setup Hugo run: | curl -L -o /tmp/hugo.tar.gz \u0026#39;https://github.com/gohugoio/hugo/releases/download/v0.110.0/hugo_extended_0.110.0_linux-amd64.tar.gz\u0026#39; tar -C ${RUNNER_TEMP} -zxvf /tmp/hugo.tar.gz hugo - name: Build run: ${RUNNER_TEMP}/hugo - name: Deploy if: github.ref == \u0026#39;refs/heads/main\u0026#39; run: | cp -R public/* ${GITHUB_WORKSPACE}/built-site/ cd ${GITHUB_WORKSPACE}/built-site git add . git config user.name \u0026#39;\u0026lt;GitHubUserName\u0026gt;\u0026#39; git config user.email \u0026#39;\u0026lt;GitHubEmail\u0026gt;\u0026#39; git commit -m \u0026#39;Updated site\u0026#39; git push The first step checks out my repository under $GITHUB_WORKSPACE and submodules:true ensures that our submodule for the theme repository is fetched as well\nThe second step allows us to reference the gh-pages branch via the $GITHUB_WORKSPACE/built-site directory, where our static sites will be stored in (Refer to the Deploy step)\nThe third and fourth steps involve installing hugo and building the static pages in the public directory with the hugo command\nThe last step copies the static sites into ${GITHUB_WORKSPACE}/built-site and pushes the changes to the referenced branch gh-pages, which is a special branch that Github recognizes and uses to publish to your Github Pages site\nNote: the content will be deployed to https://.github.io/\u0026lt;repository_name\u0026gt;/ by default if not configured otherwise. Update the base_url in config.yml to \u0026ldquo;https://.github.io/\u0026lt;repository_name\u0026gt;/\u0026rdquo;\nAfter creating the file , push the commits and Github actions should take care of delpoying it automatically, you should end up with this.\n","permalink":"/blogs/blog_02_githubactions/","summary":"Deploying a blog using GitHub Actions","title":"Creating and Deploying a Blog with Hugo on Github Pages 🚀"},{"content":"Hey, I\u0026rsquo;m Rayhan aka Rohtanza! 👋 🧑‍💻 Software Engineering student by day, passionate about:\nProgramming 💻 Anime 🎌 Otaku Culture 👾 🚀 Skills include C, C++, UI/UX, Now diving into Rust and Embedded Systems.\n🏆 Bagged gold medals every semester, Currently in my 3rd semester! 🥇\n⭐ Worked as a UI/UX Developer for 2 amazing years.\n💬 Teaching Assistant for courses like Programming Fundamentals \u0026amp; Object-Oriented Programming.\n🐧 Proud Arch Linux user, because why settle for ordinary when you can thrive in the extraordinary?\n🤫 Got some shady interests too: Android Rooting, Apple jailbreaking, and Hackintosh fun.\nConnect with Me: 🌐 GitHub: Rohtanza 🔗 LinkedIn: linkedin.com/in/rohtanza 📧 Email: rohtanza@gmail.com Sharpening my skills, one line of code at a time! ⚔️✨ ","permalink":"/about/","summary":"Hey, I\u0026rsquo;m Rayhan aka Rohtanza! 👋 🧑‍💻 Software Engineering student by day, passionate about:\nProgramming 💻 Anime 🎌 Otaku Culture 👾 🚀 Skills include C, C++, UI/UX, Now diving into Rust and Embedded Systems.\n🏆 Bagged gold medals every semester, Currently in my 3rd semester! 🥇\n⭐ Worked as a UI/UX Developer for 2 amazing years.\n💬 Teaching Assistant for courses like Programming Fundamentals \u0026amp; Object-Oriented Programming.\n🐧 Proud Arch Linux user, because why settle for ordinary when you can thrive in the extraordinary?","title":"About"}]